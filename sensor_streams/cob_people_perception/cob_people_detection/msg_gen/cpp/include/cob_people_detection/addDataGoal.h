/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/msg/addDataGoal.msg */
#ifndef COB_PEOPLE_DETECTION_MESSAGE_ADDDATAGOAL_H
#define COB_PEOPLE_DETECTION_MESSAGE_ADDDATAGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cob_people_detection
{
template <class ContainerAllocator>
struct addDataGoal_ {
  typedef addDataGoal_<ContainerAllocator> Type;

  addDataGoal_()
  : label()
  , capture_mode(0)
  , continuous_mode_images_to_capture(0)
  , continuous_mode_delay(0.0)
  {
  }

  addDataGoal_(const ContainerAllocator& _alloc)
  : label(_alloc)
  , capture_mode(0)
  , continuous_mode_images_to_capture(0)
  , continuous_mode_delay(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  label;

  typedef int32_t _capture_mode_type;
  int32_t capture_mode;

  typedef int32_t _continuous_mode_images_to_capture_type;
  int32_t continuous_mode_images_to_capture;

  typedef float _continuous_mode_delay_type;
  float continuous_mode_delay;


  typedef boost::shared_ptr< ::cob_people_detection::addDataGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::addDataGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct addDataGoal
typedef  ::cob_people_detection::addDataGoal_<std::allocator<void> > addDataGoal;

typedef boost::shared_ptr< ::cob_people_detection::addDataGoal> addDataGoalPtr;
typedef boost::shared_ptr< ::cob_people_detection::addDataGoal const> addDataGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_people_detection::addDataGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_people_detection::addDataGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::addDataGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::addDataGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::addDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c9c666c7dd8f1cd1885c5fee48c91b1";
  }

  static const char* value(const  ::cob_people_detection::addDataGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2c9c666c7dd8f1cdULL;
  static const uint64_t static_value2 = 0x1885c5fee48c91b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::addDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/addDataGoal";
  }

  static const char* value(const  ::cob_people_detection::addDataGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::addDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Adds data to the training database\n\
#\n\
# goal message\n\
string label				# a label for the data which shall be added\n\
int32 capture_mode			# mode of data capture: 0=manual (i.e. initiate data capture with service messages), 1=continuous\n\
int32 continuous_mode_images_to_capture	# if the continuous mode is selected this number specifies how many images shall be captured\n\
float32 continuous_mode_delay		# if the continuous mode is selected this number specifies the delay time between the recording of two successive images (in seconds)\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::addDataGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::addDataGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.label);
    stream.next(m.capture_mode);
    stream.next(m.continuous_mode_images_to_capture);
    stream.next(m.continuous_mode_delay);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct addDataGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::addDataGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_people_detection::addDataGoal_<ContainerAllocator> & v) 
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "capture_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.capture_mode);
    s << indent << "continuous_mode_images_to_capture: ";
    Printer<int32_t>::stream(s, indent + "  ", v.continuous_mode_images_to_capture);
    s << indent << "continuous_mode_delay: ";
    Printer<float>::stream(s, indent + "  ", v.continuous_mode_delay);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_ADDDATAGOAL_H

