/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/msg/getDetectionsGoal.msg */
#ifndef COB_PEOPLE_DETECTION_MESSAGE_GETDETECTIONSGOAL_H
#define COB_PEOPLE_DETECTION_MESSAGE_GETDETECTIONSGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cob_people_detection
{
template <class ContainerAllocator>
struct getDetectionsGoal_ {
  typedef getDetectionsGoal_<ContainerAllocator> Type;

  getDetectionsGoal_()
  : maximum_message_age(0.0)
  , timeout(0.0)
  {
  }

  getDetectionsGoal_(const ContainerAllocator& _alloc)
  : maximum_message_age(0.0)
  , timeout(0.0)
  {
  }

  typedef float _maximum_message_age_type;
  float maximum_message_age;

  typedef float _timeout_type;
  float timeout;


  typedef boost::shared_ptr< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct getDetectionsGoal
typedef  ::cob_people_detection::getDetectionsGoal_<std::allocator<void> > getDetectionsGoal;

typedef boost::shared_ptr< ::cob_people_detection::getDetectionsGoal> getDetectionsGoalPtr;
typedef boost::shared_ptr< ::cob_people_detection::getDetectionsGoal const> getDetectionsGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd64e18e045dc05a5cb38c8f05510e32";
  }

  static const char* value(const  ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdd64e18e045dc05aULL;
  static const uint64_t static_value2 = 0x5cb38c8f05510e32ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/getDetectionsGoal";
  }

  static const char* value(const  ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
float32 maximum_message_age		# maximal allowed age of response message (in s), 0 means we do not care\n\
float32 timeout				# maximal waiting time (in s) for receiving a detection, 0 is infinitely. If the detection pipeline was not running before, it will start upon receiving this message and collect messages for the full timeout period.\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.maximum_message_age);
    stream.next(m.timeout);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getDetectionsGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_people_detection::getDetectionsGoal_<ContainerAllocator> & v) 
  {
    s << indent << "maximum_message_age: ";
    Printer<float>::stream(s, indent + "  ", v.maximum_message_age);
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_GETDETECTIONSGOAL_H

