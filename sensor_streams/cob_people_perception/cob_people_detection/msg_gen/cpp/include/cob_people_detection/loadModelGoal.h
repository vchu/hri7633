/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/msg/loadModelGoal.msg */
#ifndef COB_PEOPLE_DETECTION_MESSAGE_LOADMODELGOAL_H
#define COB_PEOPLE_DETECTION_MESSAGE_LOADMODELGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cob_people_detection
{
template <class ContainerAllocator>
struct loadModelGoal_ {
  typedef loadModelGoal_<ContainerAllocator> Type;

  loadModelGoal_()
  : labels()
  {
  }

  loadModelGoal_(const ContainerAllocator& _alloc)
  : labels(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _labels_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  labels;


  typedef boost::shared_ptr< ::cob_people_detection::loadModelGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::loadModelGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct loadModelGoal
typedef  ::cob_people_detection::loadModelGoal_<std::allocator<void> > loadModelGoal;

typedef boost::shared_ptr< ::cob_people_detection::loadModelGoal> loadModelGoalPtr;
typedef boost::shared_ptr< ::cob_people_detection::loadModelGoal const> loadModelGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_people_detection::loadModelGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_people_detection::loadModelGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::loadModelGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::loadModelGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::loadModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "17b562487ca772bdfa2c078ef00d870f";
  }

  static const char* value(const  ::cob_people_detection::loadModelGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x17b562487ca772bdULL;
  static const uint64_t static_value2 = 0xfa2c078ef00d870fULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::loadModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/loadModelGoal";
  }

  static const char* value(const  ::cob_people_detection::loadModelGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::loadModelGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Loads a recognition model for the face recognizer from disc or database\n\
#\n\
# goal message\n\
string[] labels		# a list of labels of persons that shall be recognized\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::loadModelGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::loadModelGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.labels);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct loadModelGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::loadModelGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_people_detection::loadModelGoal_<ContainerAllocator> & v) 
  {
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.labels[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_LOADMODELGOAL_H

