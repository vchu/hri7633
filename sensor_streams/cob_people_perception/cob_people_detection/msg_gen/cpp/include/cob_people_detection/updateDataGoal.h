/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/msg/updateDataGoal.msg */
#ifndef COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H
#define COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cob_people_detection
{
template <class ContainerAllocator>
struct updateDataGoal_ {
  typedef updateDataGoal_<ContainerAllocator> Type;

  updateDataGoal_()
  : update_mode(0)
  , update_index(0)
  , old_label()
  , new_label()
  {
  }

  updateDataGoal_(const ContainerAllocator& _alloc)
  : update_mode(0)
  , update_index(0)
  , old_label(_alloc)
  , new_label(_alloc)
  {
  }

  typedef int32_t _update_mode_type;
  int32_t update_mode;

  typedef int32_t _update_index_type;
  int32_t update_index;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _old_label_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  old_label;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _new_label_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  new_label;


  typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct updateDataGoal
typedef  ::cob_people_detection::updateDataGoal_<std::allocator<void> > updateDataGoal;

typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal> updateDataGoalPtr;
typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal const> updateDataGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cob_people_detection::updateDataGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::updateDataGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d34a17444815de8f9d0fe51faa3bd9da";
  }

  static const char* value(const  ::cob_people_detection::updateDataGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd34a17444815de8fULL;
  static const uint64_t static_value2 = 0x9d0fe51faa3bd9daULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/updateDataGoal";
  }

  static const char* value(const  ::cob_people_detection::updateDataGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Updates data in the training database\n\
#\n\
# goal message\n\
int32 update_mode			# update the label with new_label either for 1=one image given the update_index, 2=all entries labeled with old_label\n\
int32 update_index			# the database entry with this index number shall be updated with a new label\n\
string old_label			# all database entries carrying this label are to be updated with new_label\n\
string new_label			# the new label that is supposed to replace the old one\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::updateDataGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.update_mode);
    stream.next(m.update_index);
    stream.next(m.old_label);
    stream.next(m.new_label);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct updateDataGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cob_people_detection::updateDataGoal_<ContainerAllocator> & v) 
  {
    s << indent << "update_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.update_mode);
    s << indent << "update_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.update_index);
    s << indent << "old_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.old_label);
    s << indent << "new_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.new_label);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H

