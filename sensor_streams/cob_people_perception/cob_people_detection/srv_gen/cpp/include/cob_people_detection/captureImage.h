/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/srv/captureImage.srv */
#ifndef COB_PEOPLE_DETECTION_SERVICE_CAPTUREIMAGE_H
#define COB_PEOPLE_DETECTION_SERVICE_CAPTUREIMAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cob_people_detection
{
template <class ContainerAllocator>
struct captureImageRequest_ {
  typedef captureImageRequest_<ContainerAllocator> Type;

  captureImageRequest_()
  {
  }

  captureImageRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::captureImageRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct captureImageRequest
typedef  ::cob_people_detection::captureImageRequest_<std::allocator<void> > captureImageRequest;

typedef boost::shared_ptr< ::cob_people_detection::captureImageRequest> captureImageRequestPtr;
typedef boost::shared_ptr< ::cob_people_detection::captureImageRequest const> captureImageRequestConstPtr;



template <class ContainerAllocator>
struct captureImageResponse_ {
  typedef captureImageResponse_<ContainerAllocator> Type;

  captureImageResponse_()
  : number_captured_images(0)
  {
  }

  captureImageResponse_(const ContainerAllocator& _alloc)
  : number_captured_images(0)
  {
  }

  typedef int32_t _number_captured_images_type;
  int32_t number_captured_images;


  typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct captureImageResponse
typedef  ::cob_people_detection::captureImageResponse_<std::allocator<void> > captureImageResponse;

typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse> captureImageResponsePtr;
typedef boost::shared_ptr< ::cob_people_detection::captureImageResponse const> captureImageResponseConstPtr;


struct captureImage
{

typedef captureImageRequest Request;
typedef captureImageResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct captureImage
} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::captureImageRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_people_detection::captureImageRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/captureImageRequest";
  }

  static const char* value(const  ::cob_people_detection::captureImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::captureImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_people_detection::captureImageRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::captureImageResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86d49773917fcd20b952a821d3a9e019";
  }

  static const char* value(const  ::cob_people_detection::captureImageResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86d49773917fcd20ULL;
  static const uint64_t static_value2 = 0xb952a821d3a9e019ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/captureImageResponse";
  }

  static const char* value(const  ::cob_people_detection::captureImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int32 number_captured_images\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::captureImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_people_detection::captureImageResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::captureImageRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct captureImageRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::captureImageResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.number_captured_images);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct captureImageResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_people_detection::captureImage> {
  static const char* value() 
  {
    return "86d49773917fcd20b952a821d3a9e019";
  }

  static const char* value(const cob_people_detection::captureImage&) { return value(); } 
};

template<>
struct DataType<cob_people_detection::captureImage> {
  static const char* value() 
  {
    return "cob_people_detection/captureImage";
  }

  static const char* value(const cob_people_detection::captureImage&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_people_detection::captureImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86d49773917fcd20b952a821d3a9e019";
  }

  static const char* value(const cob_people_detection::captureImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_people_detection::captureImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/captureImage";
  }

  static const char* value(const cob_people_detection::captureImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_people_detection::captureImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86d49773917fcd20b952a821d3a9e019";
  }

  static const char* value(const cob_people_detection::captureImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_people_detection::captureImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/captureImage";
  }

  static const char* value(const cob_people_detection::captureImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_PEOPLE_DETECTION_SERVICE_CAPTUREIMAGE_H

