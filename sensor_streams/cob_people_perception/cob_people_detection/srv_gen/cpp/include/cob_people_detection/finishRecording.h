/* Auto-generated by genmsg_cpp for file /home/xinyan/groovy_workspace/sandbox/hri7633/sensor_streams/cob_people_perception/cob_people_detection/srv/finishRecording.srv */
#ifndef COB_PEOPLE_DETECTION_SERVICE_FINISHRECORDING_H
#define COB_PEOPLE_DETECTION_SERVICE_FINISHRECORDING_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cob_people_detection
{
template <class ContainerAllocator>
struct finishRecordingRequest_ {
  typedef finishRecordingRequest_<ContainerAllocator> Type;

  finishRecordingRequest_()
  {
  }

  finishRecordingRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct finishRecordingRequest
typedef  ::cob_people_detection::finishRecordingRequest_<std::allocator<void> > finishRecordingRequest;

typedef boost::shared_ptr< ::cob_people_detection::finishRecordingRequest> finishRecordingRequestPtr;
typedef boost::shared_ptr< ::cob_people_detection::finishRecordingRequest const> finishRecordingRequestConstPtr;



template <class ContainerAllocator>
struct finishRecordingResponse_ {
  typedef finishRecordingResponse_<ContainerAllocator> Type;

  finishRecordingResponse_()
  {
  }

  finishRecordingResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct finishRecordingResponse
typedef  ::cob_people_detection::finishRecordingResponse_<std::allocator<void> > finishRecordingResponse;

typedef boost::shared_ptr< ::cob_people_detection::finishRecordingResponse> finishRecordingResponsePtr;
typedef boost::shared_ptr< ::cob_people_detection::finishRecordingResponse const> finishRecordingResponseConstPtr;


struct finishRecording
{

typedef finishRecordingRequest Request;
typedef finishRecordingResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct finishRecording
} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/finishRecordingRequest";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/finishRecordingResponse";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::finishRecordingRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct finishRecordingRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cob_people_detection::finishRecordingResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct finishRecordingResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cob_people_detection::finishRecording> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const cob_people_detection::finishRecording&) { return value(); } 
};

template<>
struct DataType<cob_people_detection::finishRecording> {
  static const char* value() 
  {
    return "cob_people_detection/finishRecording";
  }

  static const char* value(const cob_people_detection::finishRecording&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_people_detection::finishRecordingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const cob_people_detection::finishRecordingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_people_detection::finishRecordingRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/finishRecording";
  }

  static const char* value(const cob_people_detection::finishRecordingRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cob_people_detection::finishRecordingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const cob_people_detection::finishRecordingResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cob_people_detection::finishRecordingResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cob_people_detection/finishRecording";
  }

  static const char* value(const cob_people_detection::finishRecordingResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // COB_PEOPLE_DETECTION_SERVICE_FINISHRECORDING_H

